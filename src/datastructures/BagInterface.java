package datastructures;/** * Describes the operations for the Bag data structure. * * @param <T> The parameter type passed. */public interface BagInterface<T> {    /**     * Sets the default capacity for a Bag.     */    public static final int DEFAULT_CAPACITY = 10;    /**     * Determines the number of entries in this bag.     *     * @return the size.     */    public int size();    /**     * Determines whether this bag is full.     *     * @return true if full, false if not.     */    public boolean isFull();    /**     * Determines whether this bag is empty.     *     * @return true if empty, false if not.     */    public boolean isEmpty();    /**     * Detects whether this Bag contains a given entry.     *     * @param anEntry the entry to locate     * @return true if the Bag contains anEntry, or false otherwise     */    public boolean contains(T anEntry);    /**     * Counts the number of times a given entry appears in this Bag.     *     * @param anEntry The entry to be counted.     * @return The number of times anEntry appears in the Bag.     */    public int count(T anEntry);    /**     * Adds a new entry to this bag.     *     * @param newEntry the object to be added as a new entry     * @return true if the addition is successful, or false if not     */    public boolean add(T newEntry);    /**     * Removes the last entry from this Bag, if possible.     *     * @return either the removed entry, if successful, or null if not.     */    public T remove();    /**     * Removes a specific entry from this Bag.     *     * @param anEntry the entry to be removed     * @return The object T or null if it doesn't exist. Throws an     * IllegalArgumentException if an invalid index is given.     *     */    public T remove(T anEntry);    /**     * Removes all entries from this Bag.     */    public void clear();    /**     * Retrieves all entries that are in this Bag.     *     * @return a new array containing all the entries in the Bag.     */    public T[] toArray();}